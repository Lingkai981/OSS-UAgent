
template <typename TEST_T>
class TriangleCount : public ParallelAppBase<TEST_T, TriangleCountContext<TEST_T>>,
                      public ParallelEngine {
 public:
  INSTALL_PARALLEL_WORKER(TriangleCount<TEST_T>, TriangleCountContext<TEST_T>, TEST_T);
  using vertex_t = typename fragment_t::vertex_t;

  static constexpr MessageStrategy message_strategy =
      MessageStrategy::kAlongOutgoingEdgeToOuterVertex;
  static constexpr LoadStrategy load_strategy = LoadStrategy::kOnlyOut;

  void PEval(const fragment_t& frag, context_t& ctx,
             message_manager_t& messages) {
    auto inner_vertices = frag.InnerVertices();

    messages.InitChannels(thread_num());

    ctx.stage = 0;


    // Each vertex scatter its own out degree.
    ForEach(inner_vertices, [&messages, &frag, &ctx](int tid, vertex_t v) {
      ctx.global_degree[v] = frag.GetOutDegree(v);
      messages.SendToNeighbors<fragment_t, int>(frag, v, ctx.global_degree[v], tid);
    });

#ifdef PROFILING
    ctx.postprocess_time += GetCurrentTime();
#endif
    // Just in case we are running on a single process and no messages will
    // be sent. ForceContinue() ensures the computation
    messages.ForceContinue();
  }

  void IncEval(const fragment_t& frag, context_t& ctx,
               message_manager_t& messages) {
    using vid_t = typename context_t::vid_t;

    auto inner_vertices = frag.InnerVertices();
    auto outer_vertices = frag.OuterVertices();

    if (ctx.stage == 0) {
      ctx.stage = 1;
#ifdef PROFILING
      ctx.preprocess_time -= GetCurrentTime();
#endif
      messages.ProcessMessages<fragment_t, int>(
          thread_num(), frag,
          [&ctx](int tid, vertex_t u, int msg) { ctx.global_degree[u] = msg; });

#ifdef PROFILING
      ctx.preprocess_time += GetCurrentTime();
      ctx.exec_time -= GetCurrentTime();
#endif

      ForEach(inner_vertices,
              [this, &frag, &ctx, &messages](int tid, vertex_t v) {
                vid_t u_gid, v_gid;
                auto& nbr_vec = ctx.complete_neighbor[v];
                int degree = ctx.global_degree[v];
                nbr_vec.reserve(degree);
                auto es = frag.GetOutgoingAdjList(v);
                std::vector<vid_t> msg_vec;
                msg_vec.reserve(degree);
                for (auto& e : es) {
                  auto u = e.get_neighbor();
                  if (ctx.global_degree[u] < ctx.global_degree[v]) {
                    nbr_vec.push_back(u);
                    msg_vec.push_back(frag.Vertex2Gid(u));
                  } else if (ctx.global_degree[u] == ctx.global_degree[v]) {
                    u_gid = frag.Vertex2Gid(u);
                    v_gid = frag.GetInnerVertexGid(v);
                    if (v_gid > u_gid) {
                      nbr_vec.push_back(u);
                      msg_vec.push_back(u_gid);
                    }
                  }
                }
                messages.SendToNeighbors<fragment_t, std::vector<vid_t>>(
                    frag, v, msg_vec, tid);
              });


      messages.ForceContinue();
    } else if (ctx.stage == 1) {
      ctx.stage = 2;
#ifdef PROFILING
      ctx.preprocess_time -= GetCurrentTime();
#endif
      messages.ProcessMessages<fragment_t, std::vector<vid_t>>(
          thread_num(), frag,
          [&frag, &ctx](int tid, vertex_t u, const std::vector<vid_t>& msg) {
            auto& nbr_vec = ctx.complete_neighbor[u];
            for (auto gid : msg) {
              vertex_t v;
              if (frag.Gid2Vertex(gid, v)) {
                nbr_vec.push_back(v);
              }
            }
          });

#ifdef PROFILING
      ctx.preprocess_time += GetCurrentTime();
      ctx.exec_time -= GetCurrentTime();
#endif

      std::vector<DenseVertexSet<typename TEST_T::vertices_t>> vertexsets(
          thread_num());

      ForEach(
          inner_vertices,
          [&vertexsets, &frag](int tid) {
            auto& ns = vertexsets[tid];
            ns.Init(frag.Vertices());
          },
          [this, &vertexsets, &frag, &ctx](int tid, vertex_t v) {
            auto& v0_nbr_set = vertexsets[tid];
            auto& v0_nbr_vec = ctx.complete_neighbor[v];
            for (auto u : v0_nbr_vec) {
              v0_nbr_set.Insert(u);
            }
            for (auto u : v0_nbr_vec) {
              auto& v1_nbr_vec = ctx.complete_neighbor[u];
              for (auto w : v1_nbr_vec) {
                if (v0_nbr_set.Exist(w)) {
                  atomic_add(ctx.tricnt[u], 1);
                  atomic_add(ctx.tricnt[v], 1);
                  atomic_add(ctx.tricnt[w], 1);
                }
              }
            }
            for (auto u : v0_nbr_vec) {
              v0_nbr_set.Erase(u);
            }
          },
          [](int tid) {});

#ifdef PROFILING
      ctx.exec_time += GetCurrentTime();
      ctx.postprocess_time -= GetCurrentTime();
#endif

      ForEach(outer_vertices, [&messages, &frag, &ctx](int tid, vertex_t v) {
        if (ctx.tricnt[v] != 0) {
          messages.SyncStateOnOuterVertex<fragment_t, int>(frag, v, ctx.tricnt[v], tid);
        }
      });

#ifdef PROFILING
      ctx.postprocess_time += GetCurrentTime();
#endif
      messages.ForceContinue();
    } else if (ctx.stage == 2) {
      ctx.stage = 3;
#ifdef PROFILING
      ctx.preprocess_time -= GetCurrentTime();
#endif
      messages.ProcessMessages<fragment_t, int>(
          thread_num(), frag, [&ctx](int tid, vertex_t u, int deg) {
            atomic_add(ctx.tricnt[u], deg);
          });
#ifdef PROFILING
      ctx.preprocess_time += GetCurrentTime();
#endif

      // Output result to context data
      auto& tricnt = ctx.tricnt;
      auto& ctx_data = ctx.data();

      for (auto v : inner_vertices) {
        ctx_data[v] = tricnt[v] / 3;
      }
    }
  }
};
