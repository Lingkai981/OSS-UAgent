#include <vector>
#include <string>
#include <fstream>

#include <test.hpp>
double RESET_PROB = 0.15;

double TOLERANCE = 1.0E-2;

size_t ITERATIONS = 0;

bool USE_DELTA_CACHE = false;

// The vertex data is just the pagerank value (a double)
typedef double vertex_data_type;

// There is no edge data in the pagerank application
typedef test::empty edge_data_type;

typedef test::distributed_graph<vertex_data_type, edge_data_type> graph_type;

void init_vertex(graph_type::vertex_type& vertex) { vertex.data() = 1; }

class pagerank :
  public test::ivertex_program<graph_type, double> {

  double last_change;
public:

  edge_dir_type collect_edges(icontext_type& context,
                              const vertex_type& vertex) const {
    return test::IN_EDGES;
  } // end of collect edges


  /* collect the weighted rank of the adjacent page   */
  double collect(icontext_type& context, const vertex_type& vertex,
               edge_type& edge) const {
    return (edge.source().data() / edge.source().num_out_edges());
  }

  /* Use the total rank of adjacent pages to update this page */
  void process(icontext_type& context, vertex_type& vertex,
             const collect_type& total) {

    const double newval = (1.0 - RESET_PROB) * total + RESET_PROB;
    last_change = (newval - vertex.data());
    vertex.data() = newval;
    if (ITERATIONS) context.signal(vertex);
  }

  /* The distribute edges depend on whether the pagerank has converged */
  edge_dir_type distribute_edges(icontext_type& context,
                              const vertex_type& vertex) const {
    // If an iteration counter is set then
    if (ITERATIONS) return test::NO_EDGES;

    if(USE_DELTA_CACHE || std::fabs(last_change) > TOLERANCE ) {
      return test::OUT_EDGES;
    } else {
      return test::NO_EDGES;
    }
  }

  /* The distribute function just signal adjacent pages */
  void distribute(icontext_type& context, const vertex_type& vertex,
               edge_type& edge) const {
    if(USE_DELTA_CACHE) {
      context.post_delta(edge.target(), last_change);
    }

    if(last_change > TOLERANCE || last_change < -TOLERANCE) {
        context.signal(edge.target());
    } else {
      context.signal(edge.target()); //, std::fabs(last_change));
    }
  }

  void save(test::oarchive& oarc) const {

    if (ITERATIONS == 0) oarc << last_change;
  }

  void load(test::iarchive& iarc) {
    if (ITERATIONS == 0) iarc >> last_change;
  }

}; // end of factorized_pagerank update functor

struct pagerank_writer {
  std::string save_vertex(graph_type::vertex_type v) {
    std::stringstream strm;
    strm << v.id() << "\t" << v.data() << "\n";
    return strm.str();
  }
  std::string save_edge(graph_type::edge_type e) { return ""; }
}; // end of pagerank writer


double map_rank(const graph_type::vertex_type& v) { return v.data(); }


double pagerank_sum(graph_type::vertex_type v) {
  return v.data();
}

