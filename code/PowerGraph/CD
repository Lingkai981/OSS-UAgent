#include <boost/unordered_set.hpp>
#include <test.hpp>
#include <test/macros_def.hpp>


/*
 * Each vertex maintains a "degree" count. If this value
 * is 0, the vertex is "deleted"
 */
typedef int vertex_data_type;

/*
 * Don't need any edges
 */
typedef test::empty edge_data_type;

/*
 * Define the type of the graph
 */
typedef test::distributed_graph<vertex_data_type,
                                    edge_data_type> graph_type;

// The current K to compute
size_t CURRENT_K;


class k_core :
  public test::ivertex_program<graph_type,
                                   test::empty, // collects are integral
                                   int>,   // messages are integral
  public test::IS_POD_TYPE  {
public:
  // the last received message
  int msg;

  bool just_deleted;

  k_core():msg(0),just_deleted(false) { }

  void init(icontext_type& context, const vertex_type& vertex,
            const message_type& message) {
    msg = message;
    just_deleted = false;
  }

  // collect is never invoked
  edge_dir_type collect_edges(icontext_type& context,
                             const vertex_type& vertex) const {
    return test::NO_EDGES;
  }


  void process(icontext_type& context, vertex_type& vertex,
             const collect_type& unused) {
    if (vertex.data() > 0) {
      vertex.data() -= msg;
      if (vertex.data() < CURRENT_K) {
        just_deleted = true;
        vertex.data() = 0;
      }
    }
  }

  /*
   * If the vertex is deleted, we signal all neighbors on the distribute
   */
  edge_dir_type distribute_edges(icontext_type& context,
                              const vertex_type& vertex) const {
    return just_deleted ?
      test::ALL_EDGES : test::NO_EDGES;
  }

  /*
   * For each neighboring vertex, if it is not yet deleted,
   * signal it.
   */
  void distribute(icontext_type& context,
               const vertex_type& vertex,
               edge_type& edge) const {
    vertex_type other = edge.source().id() == vertex.id() ?
      edge.target() : edge.source();
    if (other.data() > 0) {
      context.signal(other, 1);
    }
  }

};

// type of the synchronous_engine
typedef test::synchronous_engine<k_core> engine_type;


void initialize_vertex_values(graph_type::vertex_type& v) {
  v.data() = v.num_in_edges() + v.num_out_edges();
}


test::empty signal_vertices_at_k(engine_type::icontext_type& ctx,
                                     const graph_type::vertex_type& vertex) {
  if (vertex.data() > 0 && vertex.data() < CURRENT_K) {
    ctx.signal(vertex, 0);
  }
  return test::empty();
}

/*
 * Counts the number of un-deleted vertices.
 */
size_t count_active_vertices(const graph_type::vertex_type& vertex) {
  return vertex.data() > 0;
}


size_t double_count_active_edges(const graph_type::vertex_type& vertex) {
  return (size_t) vertex.data();
}




struct save_core_at_k {
  std::string save_vertex(graph_type::vertex_type) { return ""; }
  std::string save_edge(graph_type::edge_type e) {
    if (e.source().data() > 0 && e.target().data() > 0) {
      return test::tostr(e.source().id()) + "\t" +
        test::tostr(e.target().id()) + "\n";
    }
    else return "";
  }
};


