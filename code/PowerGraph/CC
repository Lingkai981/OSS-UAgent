#include <string>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <boost/unordered_map.hpp>
#include <time.h>

#include <test.hpp>
#include <test/graph/distributed_graph.hpp>

struct vdata {
  uint64_t labelid;
  vdata() :
      labelid(0) {
  }

  void save(test::oarchive& oarc) const {
    oarc << labelid;
  }
  void load(test::iarchive& iarc) {
    iarc >> labelid;
  }
};

typedef test::distributed_graph<vdata, test::empty> graph_type;

//set label id at vertex id
void initialize_vertex(graph_type::vertex_type& v) {
  v.data().labelid = v.id();
}

//message where summation means minimum
struct min_message {
  uint64_t value;
  explicit min_message(uint64_t v) :
      value(v) {
  }
  min_message() :
      value(std::numeric_limits<uint64_t>::max()) {
  }
  min_message& operator+=(const min_message& other) {
    value = std::min<uint64_t>(value, other.value);
    return *this;
  }

  void save(test::oarchive& oarc) const {
    oarc << value;
  }
  void load(test::iarchive& iarc) {
    iarc >> value;
  }
};

class label_propagation: public test::ivertex_program<graph_type, size_t,
    min_message>, public test::IS_POD_TYPE {
private:
  size_t recieved_labelid;
  bool perform_distribute;
public:
  label_propagation() {
    recieved_labelid = std::numeric_limits<size_t>::max();
    perform_distribute = false;
  }

  //receive messages
  void init(icontext_type& context, const vertex_type& vertex,
      const message_type& msg) {
    recieved_labelid = msg.value;
  }

  //do not collect
  edge_dir_type collect_edges(icontext_type& context,
      const vertex_type& vertex) const {
    return test::NO_EDGES;
  }
  size_t collect(icontext_type& context, const vertex_type& vertex,
      edge_type& edge) const {
    return 0;
  }

  //update label id. If updated, distribute messages
  void process(icontext_type& context, vertex_type& vertex,
      const collect_type& total) {
    if (recieved_labelid == std::numeric_limits<size_t>::max()) {
      perform_distribute = true;
    } else if (vertex.data().labelid > recieved_labelid) {
      perform_distribute = true;
      vertex.data().labelid = recieved_labelid;
    }
  }

  edge_dir_type distribute_edges(icontext_type& context,
      const vertex_type& vertex) const {
    if (perform_distribute)
      return test::ALL_EDGES;
    else
      return test::NO_EDGES;
  }

  //If a neighbor vertex has a bigger label id, send a massage
  void distribute(icontext_type& context, const vertex_type& vertex,
      edge_type& edge) const {
    if (edge.source().id() != vertex.id()
        && edge.source().data().labelid > vertex.data().labelid) {
      context.signal(edge.source(), min_message(vertex.data().labelid));
    }
    if (edge.target().id() != vertex.id()
        && edge.target().data().labelid > vertex.data().labelid) {
      context.signal(edge.target(), min_message(vertex.data().labelid));
    }
  }
};

class graph_writer {
public:
  std::string save_vertex(graph_type::vertex_type v) {
    std::stringstream strm;
    strm << v.id() << "," << v.data().labelid << "\n";
    return strm.str();
  }
  std::string save_edge(graph_type::edge_type e) {
    return "";
  }
};


