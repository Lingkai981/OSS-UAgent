#include <vector>
#include <string>
#include <fstream>
#include <test.hpp>
typedef float distance_type;

struct vertex_data : test::IS_POD_TYPE {
  distance_type dist;
  vertex_data(distance_type dist = std::numeric_limits<distance_type>::max()) :
    dist(dist) { }
}; // end of vertex data

struct edge_data : test::IS_POD_TYPE {
  distance_type dist;
  edge_data(distance_type dist = 1) : dist(dist) { }
}; // end of edge data

typedef test::distributed_graph<vertex_data, edge_data> graph_type;

inline graph_type::vertex_type
get_other_vertex(const graph_type::edge_type& edge,
                 const graph_type::vertex_type& vertex) {
  return vertex.id() == edge.source().id()? edge.target() : edge.source();
}

bool DIRECTED_SSSP = false;

struct min_distance_type : test::IS_POD_TYPE {
  distance_type dist;
  min_distance_type(distance_type dist =
                    std::numeric_limits<distance_type>::max()) : dist(dist) { }
  min_distance_type& operator+=(const min_distance_type& other) {
    dist = std::min(dist, other.dist);
    return *this;
  }
};

class sssp :
  public test::ivertex_program<graph_type,
                                   test::empty,
                                   min_distance_type>,
  public test::IS_POD_TYPE {
  distance_type min_dist;
  bool changed;
public:
  void init(icontext_type& context, const vertex_type& vertex,
            const min_distance_type& msg) {
    min_dist = msg.dist;
  }

  edge_dir_type collect_edges(icontext_type& context,
                             const vertex_type& vertex) const {
    return test::NO_EDGES;
  }; // end of collect_edges

  void process(icontext_type& context, vertex_type& vertex,
             const test::empty& empty) {
    changed = false;
    if(vertex.data().dist > min_dist) {
      changed = true;
      vertex.data().dist = min_dist;
    }
  }

  edge_dir_type distribute_edges(icontext_type& context,
                             const vertex_type& vertex) const {
    if(changed)
      return DIRECTED_SSSP? test::OUT_EDGES : test::ALL_EDGES;
    else return test::NO_EDGES;
  }; // end of distribute_edges

  void distribute(icontext_type& context, const vertex_type& vertex,
               edge_type& edge) const {
    const vertex_type other = get_other_vertex(edge, vertex);
    distance_type newd = vertex.data().dist + edge.data().dist;
    if (other.data().dist > newd) {
      const min_distance_type msg(newd);
      context.signal(other, msg);
    }
  } // end of distribute

}; // end of shortest path vertex program

struct shortest_path_writer {
  std::string save_vertex(const graph_type::vertex_type& vtx) {
    std::stringstream strm;
    strm << vtx.id() << "\t" << vtx.data().dist << "\n";
    return strm.str();
  }
  std::string save_edge(graph_type::edge_type e) { return ""; }
}; // end of shortest_path_writer



struct max_deg_vertex_reducer: public test::IS_POD_TYPE {
  size_t degree;
  test::vertex_id_type vid;
  max_deg_vertex_reducer& operator+=(const max_deg_vertex_reducer& other) {
    if (degree < other.degree) {
      (*this) = other;
    }
    return (*this);
  }
};

max_deg_vertex_reducer find_max_deg_vertex(const graph_type::vertex_type vtx) {
  max_deg_vertex_reducer red;
  red.degree = vtx.num_in_edges() + vtx.num_out_edges();
  red.vid = vtx.id();
  return red;
}

