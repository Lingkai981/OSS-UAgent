#include <stdlib.h>
#include <math.h>
#include <test.hpp>

class DjikstraNode {
public:
    long id;
    double cost;
    bool launched;
    bool done;

    DjikstraNode(){
        id = 0;
        cost = 1e100;
        launched = false;
        done=false;
    }

  void save(test::oarchive& oarc) const {
    oarc << id << cost << launched << done;
  }

  void load(test::iarchive& iarc) {
    iarc >> id >> cost >> launched >> done;
  }
};

class PrestigeAnalysisNode {
public:
    std::map<long,DjikstraNode> djikstra_pieces;
    double local_value;
    double total;
    long count;
    int edge_count;

    PrestigeAnalysisNode(){
        local_value=0.0;
        total=0.0;
        count=0;
        edge_count=-1;
    }

    void save(test::oarchive& oarc) const {
        oarc << djikstra_pieces << local_value << total << count << edge_count;
    }

    void load(test::iarchive& iarc) {
        iarc >> djikstra_pieces >> local_value >> total >> count >> edge_count;
    }
};

class collect {
public:
    unsigned long id;
    double cost;
    int edge_count;

    collect(){
        id=0;
        cost=0.0;
        edge_count=1;
    }

    collect& operator+=(const collect& other){
        if(other.id < 0){
            return *this;
        }
        if(this->id < 0){
            return *this;
        }
        if (cost <= other.cost){
            this->edge_count++;
            return *this;
        }
        this->edge_count += other.edge_count;
        return *this;
    }


    void save(test::oarchive& oarc) const {
       oarc << id << cost << edge_count;
     }

     void load(test::iarchive& iarc) {
       iarc >> id >> cost >> edge_count;
     }

};


class collectMultiTree {
public:
    std::map<long,collect> content;
    int edge_count;

    collectMultiTree(){
        edge_count=0;
    }

    collectMultiTree& operator+=(const collectMultiTree& other){
        return *this;
    }

    void save(test::oarchive& oarc) const {
        oarc << content << edge_count;
    }

    void load(test::iarchive& iarc) {
        iarc >> content >> edge_count;
    }
};


typedef PrestigeAnalysisNode vertex_data_type;

typedef collectMultiTree collect_type;

// The graph type is determined by the vertex and edge data types
typedef test::distributed_graph<vertex_data_type, double> graph_type;

bool line_parser(graph_type& graph, const std::string& filename, const std::string& textline) {
  std::stringstream strm(textline);
  test::vertex_id_type vid;
  // first entry in the line is a vertex ID
  strm >> vid;
  PrestigeAnalysisNode node;
  // insert this vertex with its label
  graph.add_vertex(vid, node);
  // while there are elements in the line, continue to read until we fail
  double edge_val=1.0;
  while(1){
    test::vertex_id_type other_vid;
    strm >> other_vid;
    strm >> edge_val;
    if (strm.fail())
      break;
    graph.add_edge(vid, other_vid,edge_val);
  }

  return true;
}

class ClearBooleans :
        public test::ivertex_program<graph_type, collect_type>,
        public test::IS_POD_TYPE {
public:
  edge_dir_type collect_edges(icontext_type& context, const vertex_type& vertex) const {
    return test::NO_EDGES;
  }

  collect_type collect(icontext_type& context, const vertex_type& vertex, edge_type& edge) const {
        collectMultiTree g;
        return g;
  }

  void process(icontext_type& context, vertex_type& vertex, const collect_type& total) {
      for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
          iter != vertex.data().djikstra_pieces.end(); ++iter){
          long key = iter->first;
          vertex.data().djikstra_pieces[key].launched = false;
          vertex.data().djikstra_pieces[key].done = false;
          vertex.data().djikstra_pieces[key].cost = 0.0;
      }
  }

  edge_dir_type distribute_edges(icontext_type& context, const vertex_type& vertex) const {
          return test::NO_EDGES;
  }

  void distribute(icontext_type& context, const vertex_type& vertex, edge_type& edge) const {
  }
};
class DjikstraAlgorithm :
  public test::ivertex_program<graph_type, collect_type>,
  public test::IS_POD_TYPE {
    bool changed;

  public:
    edge_dir_type collect_edges(icontext_type& context, const vertex_type& vertex) const {
      return test::IN_EDGES;
    }

    collect_type collect(icontext_type& context, const vertex_type& vertex, edge_type& edge) const {
    collect g;
    collectMultiTree tree;
        for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
            iter != vertex.data().djikstra_pieces.end(); ++iter){
            long key=iter->first;
            if((edge.source().data().djikstra_pieces[key].launched == true)&&
                    (edge.source().data().djikstra_pieces[key].done == false)){
                double c = edge.data() + edge.source().data().djikstra_pieces[key].cost;
                g.cost = c;
                g.id = edge.source().data().djikstra_pieces[key].id;
                g.edge_count = 1;
                tree.content[key] = g;
            }else{
                g.id=0;
            }
        }
    return tree;
    }

    void process(icontext_type& context, vertex_type& vertex, const collect_type& total) {
        for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
            iter != vertex.data().djikstra_pieces.end(); ++iter){
            long key = iter->first;
            if(vertex.data().djikstra_pieces[key].launched == false){
                vertex.data().djikstra_pieces[key].launched = true;
                vertex.data().edge_count = total.edge_count;
                    if(vertex.data().djikstra_pieces[key].cost > total.content.find(key)->second.cost){
                    vertex.data().djikstra_pieces[key].cost = total.content.find(key)->second.cost;
                    vertex.data().djikstra_pieces[key].id = total.content.find(key)->second.id;
                    }else{
                    vertex.data().djikstra_pieces[key].done = true;
                    }
            }else{
                vertex.data().djikstra_pieces[key].done = true;
            }
        }
        for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
            iter != vertex.data().djikstra_pieces.end(); ++iter){
            long key = iter->first;
            if(vertex.data().djikstra_pieces.find(key)==vertex.data().djikstra_pieces.end()){
                vertex.data().djikstra_pieces[key].launched = true;
                vertex.data().edge_count = total.edge_count;
                vertex.data().djikstra_pieces[key].cost = total.content.find(key)->second.cost;
                vertex.data().djikstra_pieces[key].id = total.content.find(key)->second.id;
            }
        }
    }

    edge_dir_type distribute_edges(icontext_type& context, const vertex_type& vertex) const {
      // if vertex data changes, distribute to all edges.
        bool done = true;
        for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
            iter != vertex.data().djikstra_pieces.end(); ++iter){
            long key = iter->first;
            if(vertex.data().djikstra_pieces.find(key)->second.launched &&
                    !vertex.data().djikstra_pieces.find(key)->second.done){
                done = false;
            }
        }
        if(!done){
            return test::OUT_EDGES;
        }else{
            return test::NO_EDGES;
        }
    }

    void distribute(icontext_type& context, const vertex_type& vertex, edge_type& edge) const {
    for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
        iter != vertex.data().djikstra_pieces.end(); ++iter){
        long key = iter->first;
        if((vertex.data().djikstra_pieces.find(key)->second.done == false) &&
                (vertex.data().djikstra_pieces.find(key)->second.launched == true)){
                context.signal(edge.target());
            }
    }
  }
};

size_t num_vertices = 3000;
size_t desired_vertices_count = 3000;
size_t selected_vertices_count = 0;

struct betweeness_writer {
  std::string save_vertex(graph_type::vertex_type v) {
    std::stringstream strm;
    strm << v.id();
    double betweeness = 0.0;
    for(std::map<long, DjikstraNode>::const_iterator iter = v.data().djikstra_pieces.begin();
        iter != v.data().djikstra_pieces.end(); ++iter){
        betweeness += iter->second.cost;
    }
    betweeness /= selected_vertices_count;
    strm << "\t" << betweeness << std::endl;
    return strm.str();
  }
  std::string save_edge (graph_type::edge_type e) { return ""; }
};

bool selectVertices(const graph_type::vertex_type& vertex){
    unsigned int r = random();
    std::cout << "Random seed is " << r << std::endl;
    if(r < (desired_vertices_count * RAND_MAX / num_vertices)){
          selected_vertices_count++;
          return true;
    }
    return false;
}

class Betweenesscollect{
public:
    std::map<long,long> counts;
    std::map<long,long> edge_count;

 void save(test::oarchive& oarc) const {
    oarc << counts << edge_count;
  }

  void load(test::iarchive& iarc) {
    iarc >> counts >> edge_count;
  }

  Betweenesscollect& operator+=(const Betweenesscollect& collect){
    for(std::map<long, long>::const_iterator iter = this->counts.begin();
        iter != this->counts.end(); ++iter ){
                long key = iter->first;
                this->counts[key] += collect.counts.find(key)->second;
                this->edge_count[key] += collect.edge_count.find(key)->second;
	}
    for(std::map<long, long>::const_iterator iter = collect.counts.begin();
            iter != collect.counts.end(); ++iter){
                long key = iter->first;
                if(this->counts.find(key) != this->counts.end()){
                        this->counts[key] = collect.counts.find(key)->second;
                        this->edge_count[key] = collect.edge_count.find(key)->second;
                }
    }
    return *this;
  }


};

class BetweenessAlgorithm :
  public test::ivertex_program<graph_type, Betweenesscollect>,
  public test::IS_POD_TYPE {
    bool changed;

  public:
    edge_dir_type collect_edges(icontext_type& context, const vertex_type& vertex) const {
      return test::IN_EDGES;
    }

    Betweenesscollect collect(icontext_type& context, const vertex_type& vertex, edge_type& edge) const {
	Betweenesscollect g;
    for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
        iter != vertex.data().djikstra_pieces.end(); ++iter){
        long key= iter->first;
        if(edge.target().data().djikstra_pieces[key].id == vertex.id()){
            if(edge.source().data().djikstra_pieces[key].launched == true){
                g.counts[key] = edge.source().data().djikstra_pieces[key].cost;
                g.edge_count[key] = 1;
            }
        }
	}
    return g;
    }

    void process(icontext_type& context, vertex_type& vertex, const Betweenesscollect& total) {
        for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
                iter != vertex.data().djikstra_pieces.end(); ++iter){
            long key = iter->first;
            if(total.edge_count.find(key)->second==0){
                vertex.data().djikstra_pieces[key].launched = true;
                vertex.data().djikstra_pieces[key].cost = 0.0;
            }
            if((vertex.data().djikstra_pieces[key].launched == true)&&
                    (vertex.data().djikstra_pieces[key].done == false)&&
                    (((long)vertex.data().djikstra_pieces[key].cost)==total.edge_count.find(key)->second)){
                vertex.data().djikstra_pieces[key].done = true;
                vertex.data().djikstra_pieces[key].cost = fmax(1.0,(double)total.edge_count.find(key)->second);
            }
        }
    }

    edge_dir_type distribute_edges(icontext_type& context, const vertex_type& vertex) const {
      // if vertex data changes, distribute to all edges.
     	bool done = true;
    for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
        iter != vertex.data().djikstra_pieces.end(); ++iter){
        long key = iter->first;
        if(vertex.data().djikstra_pieces.find(key)->second.launched && !vertex.data().djikstra_pieces.find(key)->second.done){
        		done = false;
      		}
        }
        if(!done){
                return test::OUT_EDGES;
        }else{
                return test::NO_EDGES;
        }
    }

    void distribute(icontext_type& context, const vertex_type& vertex, edge_type& edge) const {
        for(std::map<long, DjikstraNode>::const_iterator iter = vertex.data().djikstra_pieces.begin();
            iter != vertex.data().djikstra_pieces.end(); ++iter){
                long key = iter->first;
                if((vertex.data().djikstra_pieces.find(key)->second.done == false) &&
                        (vertex.data().djikstra_pieces.find(key)->second.launched == true)){
                        context.signal(edge.target());
                }
        }
    }
};



