Here’s a summary of the main API functions used in the provided code, including their parameters and purposes:

1. Vertex Class
addVertex(VertexT & vertex)
Parameters: vertex (a vertex object to add to the subgraph)
Purpose: Adds a vertex object to the current subgraph (deep copy).
hasVertex(KeyT vid)
Parameters: vid (vertex ID)
Purpose: Checks if a vertex with the specified ID exists in the current subgraph.
getVertex(KeyT id)
Parameters: id (vertex ID)
Purpose: Returns a pointer to the vertex with the given ID if it exists in the subgraph; otherwise, returns NULL.
2. Task Class
pull(KeyT id)
Parameters: id (vertex ID)
Purpose: Requests the vertex object with the given ID for use in the current task’s next iteration of computation.
3. TrimHandler Class
trim(VertexT & v)
Parameters: v (vertex object)
Purpose: Virtual function to trim a vertex's adjacency list (user-defined function). It specifies how the adjacency list of a vertex should be modified or pruned.
4. Aggregator Class
init()
Purpose: Initializes the fields of the aggregator object, typically called at the beginning of a job to set up initial states.
aggregate_udf(ValueT & context)
Parameters: context (data to be aggregated)
Purpose: A user-defined function that aggregates a value (context) to the aggregator during a computation iteration.
aggregate(ValueT & context)
Parameters: context (data to be aggregated)
Purpose: Thread-safe wrapper for aggregate_udf(), ensuring that the aggregation process is safe in a multi-threaded environment.
stepFinal_udf(PartialT & part)
Parameters: part (partial aggregator status)
Purpose: A user-defined function to finalize the aggregation by combining partial results.
stepFinal(PartialT & part)
Parameters: part (partial aggregator status)
Purpose: Thread-safe wrapper for stepFinal_udf(), which finalizes the local aggregator’s status after synchronization.
finishPartial_udf(PartialT & collector)
Parameters: collector (collector for partial results)
Purpose: A user-defined function to return the partial status of the current local aggregator.
finishPartial(PartialT & collector)
Parameters: collector (collector for partial results)
Purpose: Thread-safe wrapper for finishPartial_udf(), finalizing the local aggregator’s status.
finishFinal_udf(FinalT & collector)
Parameters: collector (collector for final results)
Purpose: A user-defined function to return the global status after synchronization of local aggregator states.
finishFinal(FinalT & collector)
Parameters: collector (collector for final results)
Purpose: Thread-safe wrapper for finishFinal_udf(), returning the global status.
init_udf(FinalT & prev)
Parameters: prev (previous global status)
Purpose: A user-defined function to update the local aggregator’s status after synchronization.
init_aggSync(FinalT & prev)
Parameters: prev (previous global status)
Purpose: Thread-safe wrapper for init_udf(), initializing the local aggregator’s status after synchronization.
5. WorkerNode Class
task_spawn(VertexT * v)

Parameters: v (pointer to a vertex)
Purpose: A user-defined function to spawn a task for a vertex v.
compute(SubgraphT & g, ContextT & context, vector & frontier)

Parameters: g (subgraph), context (task context), frontier (task frontier)
Purpose: A user-defined function that performs the computation for a given subgraph, processing vertices and updating the frontier.
pull(KeyT id)

Parameters: id (vertex ID)
Purpose: Pulls the vertex with the given ID for use in the current task's next computation iteration.
get_aggregator()

Purpose: Retrieves the pointer to the local aggregator object.
add_task(TaskT * task)

Parameters: task (pointer to a task)
Purpose: Adds a task to the task queue of the WorkerNode class.
6. Worker Class
setTrimHandler(TrimHandlerT TrimHandler)*

Parameters: TrimHandler (pointer to a TrimHandler object)
Purpose: Binds a TrimHandler object to the worker for trimming vertex adjacency lists.
setAggregator(AggregatorT ag)*

Parameters: ag (pointer to an aggregator object)
Purpose: Binds an aggregator object to the worker for aggregating computation results.
get_aggregator()

Purpose: Retrieves the pointer to the local aggregator object.
toVertex(char line)*

Parameters: line (input line containing vertex data)
Purpose: A user-defined function to parse a line of data and convert it into a vertex object.
task_spawn(VertexT * v, vector & tvec)

Parameters: v (pointer to a vertex), tvec (vector of tasks)
Purpose: A user-defined function to spawn tasks from a vertex v and add them to the task vector tvec.
run(const WorkerParams& params)

Parameters: params (worker parameters, including input graph path, output settings, etc.)
Purpose: Starts the worker job, using the provided parameters to process graph data.
7. Global Functions
init_worker(int * argc, char* argv)**
Purpose: Initializes worker settings (e.g., rank and number of workers) at the start of the main function.
worker_finalize()
Purpose: Finalizes worker settings at the end of the main function, cleaning up resources.