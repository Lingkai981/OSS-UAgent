<h1 align="center">
    <br> Platform
</h1>
<p align="center">
   A Framework for Programming Distributed Graph Processing Algorithms
</p>

**Platform** is a distributed framework for programming a broad spectrum of graph algorithms, including clustering, centrality, traversal, matching, mining, etc. Based on its high-level interface and an efficient system implementation, Platform achieves good expressiveness, productivity and efficiency at the same time. Platform follows the vertex-centric philosophy, but it moves a step further for stronger expressiveness by providing flexible control flow, the operations on arbitrary vertex sets and beyond-neighborhood communication. Platform makes diverse complex graph algorithms easy to write at the distributed runtime. The algorithms expressed in Platform take only a few lines of code, and provide a satisfactory performance.

## Publication 
- Xue Li, Ke Meng, Lu Qin, Longbin Lai, Wenyuan Yu, Zhengping Qian, Xuemin Lin, Jingren Zhou. [FLASH: A Framework for Programming Distributed Graph Processing Algorithms](https://ieeexplore.ieee.org/document/10184838). The 39th IEEE International Conference on Data Engineering (ICDE), 2023.

Please cite the paper in your publications if our work helps your research.
```bibtex
@INPROCEEDINGS{10184838,
  author={Li, Xue and Meng, Ke and Qin, Lu and Lai, Longbin and Yu, Wenyuan and Qian, Zhengping and Lin, Xuemin and Zhou, Jingren},
  booktitle={2023 IEEE 39th International Conference on Data Engineering (ICDE)}, 
  title={Flash: A Framework for Programming Distributed Graph Processing Algorithms}, 
  year={2023},
  pages={232-244},
  doi={10.1109/ICDE55515.2023.00025}}
```


## Dependencies
**Platform** is developed and tested on Red Hat 4.8.5. It should also work on other unix-like distributions. Building Platform requires the following softwares installed as dependencies.
- A C++ compiler supporting OpenMP and C++11 features
- MPICH (>= 2.1.4) or OpenMPI (>= 3.0.0)


## Building Steps

### Step 1: Prepare Machines
Suppose we use 4 Machines named Orion1, Orion2, Orion3, and Orion4, and Orion1 is the master. Each machine has a local disk with location: `/scratch/gfs/` and Orion1 has a local disk with location: `/scratch/tmp/`
    
### Step 2: Compile Platform
Suppose we put the Platform Folder into a shared folder with location /myname/
Go to folder `/myname/flash/run/` and execute the command: 

`./compile-flash.sh`

## Preparing Graph Data

### Step 1: Prepare Dataset on the Master Machine (Orion1)
Suppose we use the orkut dataset under the folder `/myname/dataset/orkut/`
#### Step 1.1
Download the txt file from [snap](http://snap.stanford.edu/data/com-Orkut.html) and extract it to `/myname/dataset/orkut/` on Orion1, and rename the txt file to graph.txt. Now we have  `/myname/dataset/orkut/graph.txt`
#### Step 1.2 
Goto folder /myname/flash/run/ and execute the following command for an undirected graph: 

`./txt2bin.sh /myname/dataset/orkut/ /scratch/tmp/`

or execute the following command for a directed graph

`./txt2bin.sh /myname/dataset/orkut/ /scratch/tmp/ directed`

or execute the following command for a weighted graph 

`./txt2bin.sh /myname/dataset/orkut/ /scratch/tmp/ weighted`

or execute the following command for a bipartite graph 

`./txt2bin.sh /myname/dataset/orkut/ /scratch/tmp/ bipartite`

Note that the keywords directed, weighted, and bipartite can be combined arbitrarily according to the graph type.
Now the text file will be stored as binary files on the Master Machine
    
### Step 2: Upload the Graph to the Distributed File System
Suppose we want to run 8 processes, i.e., each machine has 2 processes. 
#### Step 2.1 
Edit `/myname/flash/run/host_file` to be the `machine_name:1` on each line of `host_file` (see the sample)
#### Step 2.2
Goto folder `/myname/flash/run/` and execute the command: 

`./format.sh 8 /myname/dataset/orkut/ /scratch/gfs/ orkut`

## Running Platform Applications
We have provided some example applications in `/myname/flash/src/apps/` ï¼Œ and more applications are continuously being added. The following steps are required for adding and executing a new algorithm in Platform. Please refer to our [paper](https://graphscope.io/flash-full.pdf) for demonstrations of the example algorithms.

### Step 1: Write a algorithm
Write a Platform c++ algorithm under folder `/myname/flash/src/apps/`, for example `/myname/flash/src/apps/bfs.cpp`
### Step 2: Compile the algorithm
Goto folder /myname/flash/run/ and compile the algorithm using 

`./compile.sh bfs`
### Step 3: Execute 
Goto folder /myname/flash/run/ and run the algorithm using: 

`mpirun -n 8 -hostfile host_file ./bfs /scratch/gfs/ orkut 1`

Here, the last 1 is a parameter used in bfs.cpp, which is the start node id for BFS.
#ifndef API_H_
#define API_H_

#include <mpi.h>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <climits>
#include <map>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <cassert>
#include <unordered_map>
#include <functional>
#include <chrono>
#include <typeinfo>

#include "func.h"
#include "vset.h"


using namespace std;

template<class VTYPE, class F, class M> 
inline VSet mapVertices(VSet &U, F &f, M &m, bool b = true) {
	if (b) 
		return U.Filter(use_f_v(f)).Local(use_map_v(m));
	else
		return U.Filter(use_f_v(f)).Local(use_map_v(m), NONE);

}

template<class VTYPE, class F> 
inline VSet mapVertices(VSet &U, F &f) {
	return U.Filter(use_f_v(f));
}

template<class VTYPE, class F, class M, class C, class H> 
VSet mapEdgesDense(Graph<VTYPE> &G, VSet &U, H h, F &f, M &m, C &c, bool b = true) {
	return mapEdgesDense(G, U, h, All, f, m, c, b);
}

template<class VTYPE, class F, class M, class C> 
VSet mapEdgesDense(Graph<VTYPE> &G, VSet &U, int h, VSet &T, F &f, M &m, C &c, bool b = true) {
	bool flag = ((&U) == (&All));
	if (!flag) U.sync();
	VSet res;
	if (h == EU) {
		DefinePull(pull) {
			if (use_filter(c))
				for_nb(if (flag || U.contain(nb_id)) if (use_f_dense(f)) use_dense(m); if (!use_filter(c)) break);
		};
		if (b) res = T.Pull(use_pull(pull));
		else res = T.Pull(use_pull(pull), NONE);
	} else if (h == ED) {
		DefinePull(pull) {
			if (use_filter(c))
				for_in(if (flag || U.contain(nb_id)) if (use_f_dense(f)) use_dense(m); if (!use_filter(c)) break);
		};
		if (b) res = T.Pull(use_pull(pull));
		else res = T.Pull(use_pull(pull), NONE);
	} else if (h == ER) {
		DefinePull(pull) {
			if (use_filter(c))
				for_out(if (flag || U.contain(nb_id)) if (use_f_dense(f)) use_dense(m); if (!use_filter(c)) break);
		};
		if (b) res = T.Pull(use_pull(pull));
		else res = T.Pull(use_pull(pull), NONE);
	} else {
		res = U;
	}
	return res;
}

template<class VTYPE, class F, class M, class C, class H> 
VSet mapEdgesDense(Graph<VTYPE> &G, VSet &U, H &h, VSet &T, F &f, M &m, C &c, bool b = true) {
	bool flag = ((&U) == (&All));
	if (!flag) U.sync();
	VSet res;
	DefinePull(pull) {
		auto e = use_edge(h);
		for (auto &i: e) {
			VTYPE nb = get_v(i);
			if (flag || U.contain(i))
			if (use_filter(c) && use_f_dense(f)) 
				use_dense(m); 
		}
	};
	if (b) res = T.Pull(use_pull(pull));
	else res = T.Pull(use_pull(pull), NONE);
	return res;
}

template<class VTYPE, class F, class M, class C, class R> 
VSet mapEdgesSparse(Graph<VTYPE> &G, VSet &U, int h, F &f, M &m, C &c, R &r) {
	VSet res;
	if (h == EU) {
		DefineCmb(cmb) {
			for_nb(if (use_cond(c) && use_f_sparse(f)) push_to(nb_id, _v = nb, use_sparse(m)));
		};
		res = U.Push(use_cmb(cmb), use_reduce(r));
	} else if (h == ED) {
		DefineCmb(cmb) {
			for_out(if (use_cond(c) && use_f_sparse(f)) push_to(nb_id, _v = nb, use_sparse(m)));
		};
		res = U.Push(use_cmb(cmb), use_reduce(r));
	} else if (h == ER) {
		DefineCmb(cmb) {
			for_in(if (use_cond(c) && use_f_sparse(f)) push_to(nb_id, _v = nb, use_sparse(m)));
		};
		res = U.Push(use_cmb(cmb), use_reduce(r));
	} else {
		res = U;
	}
	return res;
}

template<class VTYPE, class F, class M, class C, class R, class H> 
VSet mapEdgesSparse(Graph<VTYPE> &G, VSet &U, H &h, F &f, M &m, C &c, R &r) {
	VSet res;
	DefineCmb(cmb) {
		auto e = use_edge(h);
		for (auto &i: e) {
			VTYPE nb = get_v(i);
			if (use_cond(c) && use_f_sparse(f))
				push_to(i, _v = nb, use_sparse(m));
		}
	};
	res = U.Push(use_cmb(cmb), use_reduce(r));
	return res;
}


template<class VTYPE, class F, class M, class C, class R, class H> 
VSet mapEdges(Graph<VTYPE> &G, VSet &U, H h, F &f, M &m, C &c, R &r) {
	int len = Size(U);
	if (len > THRESHOLD) 
		return mapEdgesDense(G, U, h, f, m, c);
	else 
		return mapEdgesSparse(G, U, h, f, m, c, r);
}

template<class VTYPE, class F, class M, class C, class R, class H> 
VSet mapEdges(Graph<VTYPE> &G, VSet &U, H h, VSet &T, F &f, M &m, C &c, R &r) {
	return mapEdgesDense(G, U, h, T, f, m, c);
}

#endif
